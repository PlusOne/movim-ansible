---
- name: Deploy Movim with PostgreSQL and Nginx on Debian/Ubuntu
  hosts: all
  become: true
  vars:
    movim_dir: /var/www/movim
    service_user: www-data
    php_version: "8.1"          # Adjust as needed
    repo_url: "https://github.com/movim/movim.git"
    db_name: movim_db
    domain_name: example.com    # change as needed
    web_server: nginx
    db_driver: pgsql
    db_host: "localhost"
  vars_prompt:
    - name: pgsql_super_password
      prompt: "Enter PostgreSQL superuser (postgres) password"
      private: yes
    - name: movim_db_user
      prompt: "Enter Movim database username"
      private: no
      default: "movim"
    - name: movim_db_password
      prompt: "Enter Movim database password"
      private: yes
  tasks:
    # 1. Install required packages (PostgreSQL, PHP-FPM with pgsql driver, Nginx, etc.)
    - name: Install required packages
      apt:
        name:
          - postgresql
          - "php{{ php_version }}-fpm"
          - "php{{ php_version }}-curl"
          - "php{{ php_version }}-mbstring"
          - "php{{ php_version }}-imagick"
          - "php{{ php_version }}-gd"
          - "php{{ php_version }}-xml"
          - "php{{ php_version }}-pgsql"
          - git
          - composer
          - nginx
        state: present
        update_cache: yes

    # 2. Create and configure the PostgreSQL database.
    - name: Create PostgreSQL database for Movim
      postgresql_db:
        name: "{{ db_name }}"
        encoding: "UTF8"
        lc_collate: "en_US.UTF-8"
        lc_ctype: "en_US.UTF-8"
        state: present
        login_user: postgres
        login_password: "{{ pgsql_super_password }}"

    - name: Create PostgreSQL user for Movim
      postgresql_user:
        name: "{{ movim_db_user }}"
        password: "{{ movim_db_password }}"
        priv: "{{ db_name }}:ALL"
        state: present
        login_user: postgres
        login_password: "{{ pgsql_super_password }}"

    # 3. Create Movim working directory and set ownership.
    - name: Create Movim working directory
      file:
        path: "{{ movim_dir }}"
        state: directory
        owner: "{{ service_user }}"
        group: "{{ service_user }}"
        mode: '0755'

    # 4. Clone Movim repository from GitHub.
    - name: Clone Movim repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ movim_dir }}"
        version: master
        force: yes

    # 5. Create required subdirectories (cache, log, public/cache).
    - name: Create required subdirectories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ service_user }}"
        group: "{{ service_user }}"
        mode: '0755'
      loop:
        - "{{ movim_dir }}/cache"
        - "{{ movim_dir }}/log"
        - "{{ movim_dir }}/public/cache"

    # 6. Install Composer dependencies.
    - name: Run composer install to install Movim dependencies
      shell: /usr/bin/env COMPOSER_ALLOW_SUPERUSER=1 composer install
      args:
        chdir: "{{ movim_dir }}"

    # 7. Template the .env file with PostgreSQL configuration.
    - name: Template .env file for Movim configuration
      template:
        src: env_movim_psql.j2
        dest: "{{ movim_dir }}/.env"
        owner: "{{ service_user }}"
        group: "{{ service_user }}"
        mode: '0644'

    # 8. Run Movim database migrations.
    - name: Run Movim database migrations
      shell: /usr/bin/env COMPOSER_ALLOW_SUPERUSER=1 composer movim:migrate
      args:
        chdir: "{{ movim_dir }}"
      environment:
        DB_DRIVER: "{{ db_driver }}"
        DB_HOST: "{{ db_host }}"
        DB_DATABASE: "{{ db_name }}"
        DB_USERNAME: "{{ movim_db_user }}"
        DB_PASSWORD: "{{ movim_db_password }}"

    # 9. Deploy Nginx configuration.
    - name: Deploy Nginx configuration for Movim
      template:
        src: nginx_movim.conf.j2
        dest: /etc/nginx/sites-available/movim
      notify: Reload Nginx

    - name: Enable Movim site in Nginx
      file:
        src: /etc/nginx/sites-available/movim
        dest: /etc/nginx/sites-enabled/movim
        state: link

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded
